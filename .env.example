# Environment Variables Template for Facial Sentiment Analysis
# Copy this file to .env.local and fill in your actual values

# Supabase Configuration
# Get these values from your Supabase project dashboard
VITE_SUPABASE_PROJECT_ID=your_project_id_here
VITE_SUPABASE_ANON_KEY=your_anon_key_here

# Sentry Configuration (Error Tracking & Performance Monitoring)
# Get these from your Sentry project dashboard
VITE_SENTRY_DSN=https://your-dsn@sentry.io/project-id
SENTRY_ORG=your-sentry-org
SENTRY_PROJECT=your-sentry-project
SENTRY_AUTH_TOKEN=your-auth-token

# Vercel Configuration (for CI/CD)
VERCEL_ORG_ID=your-vercel-org-id
VERCEL_PROJECT_ID=your-vercel-project-id
VERCEL_TOKEN=your-vercel-token

# CI/CD Configuration
CODECOV_TOKEN=your-codecov-token
SNYK_TOKEN=your-snyk-token
SLACK_WEBHOOK_URL=your-slack-webhook-url

# Production Build Configuration
VITE_BUILD_TARGET=production
NODE_ENV=production

# Development Notes:
# - VITE_ prefix is required for Vite to expose variables to client-side code
# - Never commit .env.local to version control
# - Store sensitive tokens in your CI/CD platform's secrets management
# - For production deployment, set these in your hosting platform's environment variables

# Production Deployment Checklist:
# 1. Set environment variables in Vercel dashboard:
#    - VITE_SUPABASE_PROJECT_ID
#    - VITE_SUPABASE_ANON_KEY
#    - VITE_SENTRY_DSN
#    - VITE_BUILD_TARGET (optional)
# 2. Set build-time variables:
#    - SENTRY_ORG, SENTRY_PROJECT, SENTRY_AUTH_TOKEN
#    - VERCEL_ORG_ID, VERCEL_PROJECT_ID
# 3. Configure GitHub Secrets:
#    - VERCEL_TOKEN, CODECOV_TOKEN, SNYK_TOKEN
#    - SLACK_WEBHOOK_URL (optional)
# 4. Configure Supabase project with proper security policies
# 5. Set up Sentry project with appropriate data retention and sampling
# 6. Run deployment validation: npm run deploy:validate
# 7. Deploy to Vercel: npm run deploy:vercel
# 8. Verify production URL functionality and monitoring