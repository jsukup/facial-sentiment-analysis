name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: TypeScript check
        run: npm run build
        
      - name: Run unit tests
        run: npm run test
        
      - name: Check test coverage
        run: npm run test:coverage
        
      - name: Bundle size check
        run: |
          npm run build
          BUNDLE_SIZE=$(du -sb build/assets/*.js 2>/dev/null | awk '{sum += $1} END {print sum}' || echo "0")
          BUNDLE_MB=$((BUNDLE_SIZE / 1024 / 1024))
          echo "Bundle size: ${BUNDLE_MB}MB"
          if [ $BUNDLE_MB -gt 2 ]; then
            echo "‚ùå Bundle size (${BUNDLE_MB}MB) exceeds 2MB limit"
            exit 1
          fi
          echo "‚úÖ Bundle size OK: ${BUNDLE_MB}MB"

  e2e-testing:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-gates
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install chromium
        
      - name: Build application
        run: npm run build
        
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: test-results/
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=high
        
      - name: Check for vulnerable dependencies
        run: |
          VULNS=$(npm audit --audit-level=high --json | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' 2>/dev/null || echo "0")
          if [ "$VULNS" -gt 0 ]; then
            echo "‚ùå Found $VULNS high/critical vulnerabilities"
            npm audit
            exit 1
          fi
          echo "‚úÖ No high/critical vulnerabilities found"

  preview-deployment:
    name: Preview Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality-gates, security-audit]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
        
      - name: Deploy to Vercel Preview
        run: |
          vercel deploy --token=${{ secrets.VERCEL_TOKEN }} --confirm > deployment-url.txt
          echo "DEPLOYMENT_URL=$(cat deployment-url.txt)" >> $GITHUB_ENV
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = process.env.DEPLOYMENT_URL;
            const comment = `üöÄ **Preview Deployment Ready**
            
            **URL**: ${deploymentUrl}
            
            **Tests**: ‚úÖ All tests passing
            **Build**: ‚úÖ Successful
            **Security**: ‚úÖ No vulnerabilities
            
            Review your changes at the preview URL above.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  production-deployment:
    name: Production Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality-gates, e2e-testing, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
        
      - name: Deploy to Production
        id: deploy
        run: |
          vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} --confirm > deployment-url.txt
          URL=$(cat deployment-url.txt)
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $URL"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          
      - name: Health Check
        run: |
          URL="${{ steps.deploy.outputs.url }}"
          echo "Checking health at: $URL/api/health"
          for i in {1..5}; do
            if curl -f "$URL/api/health"; then
              echo "‚úÖ Health check passed"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 10s..."
            sleep 10
          done
          echo "‚ùå Health check failed"
          exit 1
          
      - name: Notify deployment success
        run: |
          echo "üéâ Production deployment successful!"
          echo "URL: ${{ steps.deploy.outputs.url }}"

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: production-deployment
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run Lighthouse audit
        run: |
          npm install -g @lhci/cli
          lhci autorun --collect.url="${{ needs.production-deployment.outputs.url }}" --assert.preset=lighthouse:recommended
        continue-on-error: true