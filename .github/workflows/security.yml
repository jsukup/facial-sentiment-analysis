name: 'Security Scanning'

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  dependency-scan:
    name: 'Dependency Security Scan'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 'Install Dependencies'
        run: npm ci --prefer-offline --no-audit
        
      - name: 'Run npm audit'
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npx audit-ci --moderate
          
      - name: 'Snyk Security Scan'
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-results.json
          
      - name: 'Upload Security Results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results-${{ github.sha }}
          path: |
            npm-audit.json
            snyk-results.json
          retention-days: 30

  secret-scan:
    name: 'Secret Detection'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 'TruffleHog Secret Scan'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  code-security:
    name: 'Static Code Analysis'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Initialize CodeQL'
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended,security-and-quality
          
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 'Install Dependencies'
        run: npm ci --prefer-offline --no-audit
        
      - name: 'Build for Analysis'
        run: npm run build
        env:
          VITE_SUPABASE_PROJECT_ID: mock-project-id
          VITE_SUPABASE_ANON_KEY: mock-anon-key
          
      - name: 'Perform CodeQL Analysis'
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  docker-security:
    name: 'Container Security'
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Build Test Container'
        run: |
          cat > Dockerfile.test << 'EOF'
          FROM node:20-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --only=production
          COPY . .
          RUN npm run build
          EXPOSE 3000
          CMD ["npm", "run", "preview"]
          EOF
          docker build -f Dockerfile.test -t facial-sentiment:test .
          
      - name: 'Run Trivy Container Scan'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'facial-sentiment:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 'Upload Trivy Results'
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  security-report:
    name: 'Security Report'
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, code-security]
    if: always()
    
    steps:
      - name: 'Download Security Results'
        uses: actions/download-artifact@v4
        with:
          name: security-scan-results-${{ github.sha }}
          path: security-results/
          
      - name: 'Generate Security Report'
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "**Date:** $(date)" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          if [ -f security-results/npm-audit.json ]; then
            echo "## NPM Audit Results" >> security-report.md
            echo '```json' >> security-report.md
            jq '.vulnerabilities | length' security-results/npm-audit.json >> security-report.md || echo "No vulnerabilities" >> security-report.md
            echo '```' >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "## Job Status" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-report.md
          echo "- Code Security: ${{ needs.code-security.result }}" >> security-report.md
          
      - name: 'Upload Security Report'
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ github.sha }}
          path: security-report.md
          retention-days: 90
          
      - name: 'Create Security Issue'
        if: failure()
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          filename: .github/SECURITY_ISSUE_TEMPLATE.md
          assignees: ${{ github.actor }}