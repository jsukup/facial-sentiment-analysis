name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        test-suite: 
          - participant-journey
          - admin-dashboard
          - real-time-analysis
          - data-integrity
          - accessibility-visual

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install ${{ matrix.browser }} --with-deps

    - name: Run E2E tests - ${{ matrix.test-suite }}
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        VITE_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.VITE_SUPABASE_SERVICE_ROLE_KEY }}
        CI: true
      run: |
        npm run test:e2e -- \
          --project=${{ matrix.browser }} \
          tests/e2e/${{ matrix.test-suite }}.spec.ts

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.browser }}-${{ matrix.test-suite }}
        path: test-results/
        retention-days: 30

    - name: Upload screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: screenshots-${{ matrix.browser }}-${{ matrix.test-suite }}
        path: test-results/**/*.png
        retention-days: 7

    - name: Upload videos
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: videos-${{ matrix.browser }}-${{ matrix.test-suite }}
        path: test-results/**/*.webm
        retention-days: 7

  accessibility:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install chromium --with-deps

    - name: Run accessibility audit
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        CI: true
      run: npm run test:e2e -- tests/e2e/accessibility-visual.spec.ts --grep "Accessibility"

    - name: Upload accessibility report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-report
        path: test-results/accessibility/
        retention-days: 30

  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun

    - name: Upload Lighthouse report
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-report
        path: .lighthouseci/
        retention-days: 30

  test-report:
    runs-on: ubuntu-latest
    needs: [test, accessibility, performance]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate test report summary
      run: |
        echo "## E2E Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Suite Results" >> $GITHUB_STEP_SUMMARY
        echo "| Browser | Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|------------|--------|" >> $GITHUB_STEP_SUMMARY
        
        # Add test results to summary
        for dir in test-results-*; do
          if [ -d "$dir" ]; then
            browser=$(echo $dir | cut -d'-' -f3)
            suite=$(echo $dir | cut -d'-' -f4-)
            if [ -f "$dir/results.json" ]; then
              status="✅ Passed"
            else
              status="❌ Failed"
            fi
            echo "| $browser | $suite | $status |" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Screenshots and videos available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Accessibility report available for review" >> $GITHUB_STEP_SUMMARY
        echo "- Performance metrics tracked in Lighthouse report" >> $GITHUB_STEP_SUMMARY